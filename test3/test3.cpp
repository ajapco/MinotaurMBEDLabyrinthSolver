#include <cv.h>
#include <highgui.h>
#include <iostream>

//#include <SerialStream.h>

using namespace cv;
using namespace std;

//~ #define MAZE_WIDTH 5
//~ #define MAZE_HEIGHT 3
//~ 
/*const char maze[MAZE_HEIGHT][MAZE_WIDTH] = {
                                    {2,3,0,0,1},
                                    {1,1,0,0,1},
                                    {0,0,0,0,1}
                                    };*/
#define MAZE_WIDTH 16
#define MAZE_HEIGHT 13

// const char maze[MAZE_HEIGHT][MAZE_WIDTH] = {
//                                     {2,3,0,0,1},
//                                     {1,1,0,0,1},
//                                     {0,0,0,0,1}
//                                     };

				    
// #define MAZE_WIDTH 50
// #define MAZE_HEIGHT 50
// 
// const char maze_disabled[MAZE_HEIGHT][MAZE_WIDTH] = {
// {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
// {1,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1},
// {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1},
// {1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1},
// {1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1},
// {1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1},
// {1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,1},
// {1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1},
// {1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1},
// {1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1},
// {1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1},
// {1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1},
// {1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1},
// {1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
// {1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
// {1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1},
// {1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1},
// {1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1},
// {1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,1},
// {1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1},
// {1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1},
// {1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1},
// {1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1},
// {1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1},
// {1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1},
// {1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1},
// {1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,3,1,1,1,1},
// {1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1},
// };
// 
// const char maze[MAZE_HEIGHT][MAZE_WIDTH] = {
// {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
// {1,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1},
// {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1},
// {1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1},
// {1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1},
// {1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1},
// {1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,1},
// {1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1},
// {1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1},
// {1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1},
// {1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1},
// {1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1},
// {1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1},
// {1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
// {1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
// {1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1},
// {1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1},
// {1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1},
// {1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,1},
// {1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1},
// {1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1},
// {1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1},
// {1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1},
// {1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1},
// {1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1},
// {1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1},
// {1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,3,1,1,1,1},
// {1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0},
// {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
// };

void printAsArray( const char maze_in[][MAZE_WIDTH])
{
		cout<<"{"<<endl;
    for(int y = 0; y < MAZE_HEIGHT; y++){
		cout<<"{";
      for (int x = 0; x < MAZE_WIDTH; x++){
        cout<<int(maze_in[y][x]);
        if (x==MAZE_WIDTH-1) {cout<<"},";}
        else {cout<<",";}
      }
      cout << endl;
    }
		cout<<"};"<<endl;
}

void printAsArray( char** maze_in)
{
		cout<<"{"<<endl;
    for(int y = 0; y < MAZE_HEIGHT; y++){
		cout<<"{";
      for (int x = 0; x < MAZE_WIDTH; x++){
        cout<<int(maze_in[y][x]);
        if (x==MAZE_WIDTH-1) {cout<<"},";}
        else {cout<<",";}
      }
      cout << endl;
    }
		cout<<"};"<<endl;
}

void printMaze( const char maze_in[][MAZE_WIDTH])
{
    for(int y = 0; y < MAZE_HEIGHT; y++){
      for (int x = 0; x < MAZE_WIDTH; x++){
        cout<<int(maze_in[y][x]);
      }
      cout << endl;
    }
}

void printMaze( char** maze_in)
{
    for(int y = 0; y < MAZE_HEIGHT; y++){
      for (int x = 0; x < MAZE_WIDTH; x++){
        cout<<int(maze_in[y][x]);
      }
      cout << endl;
    }
}

Mat& MazeMatrixToImageMatrix( const char maze_in[][MAZE_WIDTH], Mat& I)
{

    // accept only char type matrices
    CV_Assert(I.depth() != sizeof(uchar));

    const int channels = I.channels();
    switch(channels)
    {
    case 1:
        {
            for( int i = 0; i < I.rows; ++i)
                for( int j = 0; j < I.cols; ++j )
                    I.at<uchar>(i,j) = maze_in[i][j];
            break;
        }
    case 3:
        {
         Mat_<Vec3b> _I = I;

         for( int i = 0; i < I.rows; ++i)
            for( int j = 0; j < I.cols; ++j )
               {
		 if (maze_in[i][j]==0) {
                   _I(i,j)[0] = 255;
                   _I(i,j)[1] = 255;
                   _I(i,j)[2] = 255;
		 }
		 else if (maze_in[i][j]==1) {
                   _I(i,j)[0] = 0;
                   _I(i,j)[1] = 0;
                   _I(i,j)[2] = 0;
		 }
		 else if (maze_in[i][j]==2) {
                   _I(i,j)[0] = 0;
                   _I(i,j)[1] = 0;
                   _I(i,j)[2] = 255;
		 }
		 else if (maze_in[i][j]==3) {
                   _I(i,j)[0] = 255;
                   _I(i,j)[1] = 0;
                   _I(i,j)[2] = 0;
		 }
		 
            }
         I = _I;
         break;
        }
    }

    return I;
}

char **createMaze()
{
    char **maze_var=new char*[MAZE_HEIGHT];
    for (int i=0; i<MAZE_HEIGHT; i++)
    {
       maze_var[i] = new char[MAZE_WIDTH];
       for (int j=0; j<MAZE_WIDTH; j++)
         maze_var[i][j]=(char)0;
    }

    return maze_var;
}

void freeMaze(char **maze_var)
{
    for (int i=0; i<MAZE_HEIGHT; i++)
      delete [] maze_var[i];
    delete [] maze_var;
}

char** ImageMatrixToMazeMatrix(Mat& I)
{

    char **maze_out=new char*[MAZE_HEIGHT];
    for (int i=0; i<MAZE_HEIGHT; i++)
    {
       maze_out[i] = new char[MAZE_WIDTH];
       for (int j=0; j<MAZE_WIDTH; j++)
         maze_out[i][j]=(char)0;
    }

	//~ char maze_out[MAZE_HEIGHT][MAZE_WIDTH] = {
										//~ {0,0,0,0,0},
										//~ {0,0,0,0,0},
										//~ {0,0,0,0,0}
										//~ };

    // accept only char type matrices
    CV_Assert(I.depth() != sizeof(uchar));

    const int channels = I.channels();
    switch(channels)
    {
    case 1:
        {
            for( int i = 0; i < I.rows; ++i)
                for( int j = 0; j < I.cols; ++j )
                    cout<<int(I.at<uchar>(i,j))<<endl;
            break;
        }
    case 3:
        {
         Mat_<Vec3b> _I = I;

         for( int i = 0; i < I.rows; ++i)
         {
            for( int j = 0; j < I.cols; ++j )
            {
				   if (int(_I(i,j)[0])==255 && int(_I(i,j)[1])==255 && int(_I(i,j)[2])==255) {
					   //cout<<"0";
						maze_out[i][j]=0;
					   }
				   else if (int(_I(i,j)[0])==0 && int(_I(i,j)[1])==0 && int(_I(i,j)[2])==0) {
					   //cout<<"1";
						maze_out[i][j]=1;
					   }
				   else if (int(_I(i,j)[0])==0 && int(_I(i,j)[1])==0 && int(_I(i,j)[2])==255) {
					   //cout<<"2";
						maze_out[i][j]=2;
					   }
				   else if (int(_I(i,j)[0])==255 && int(_I(i,j)[1])==0 && int(_I(i,j)[2])==0) {
					   //cout<<"3";
						maze_out[i][j]=3;
					   }
				 		 
            }
			//cout << endl;
         }
         I = _I;
         break;
        }
    }
    return(maze_out);
}

void calcMedian(Mat& M_RGB)
{

  Mat I;
  cvtColor(M_RGB,I,CV_RGB2HSV);
  //cout<<"I = "<<M_RGB<<endl;
  
  int R=0;
  int G=0;
  int B=0;
  
    // accept only char type matrices
    CV_Assert(I.depth() != sizeof(uchar));

    const int channels = I.channels();
    switch(channels)
    {
    case 1:
        {
            for( int i = 0; i < I.rows; ++i)
                for( int j = 0; j < I.cols; ++j )
                    cout<<int(I.at<uchar>(i,j))<<endl;
            break;
        }
    case 3:
        {
         Mat_<Vec3b> _I = I;

         for( int i = 0; i < I.rows; ++i)
         {
            for( int j = 0; j < I.cols; ++j )
            {
	      R+=int(_I(i,j)[0]);
	      G+=int(_I(i,j)[1]);
	      B+=int(_I(i,j)[2]);
				 		 
            }
       }
         R = R/(float)(I.rows*I.cols);
         G = G/(float)(I.rows*I.cols);
         B = B/(float)(I.rows*I.cols);
         for( int i = 0; i < I.rows; ++i)
         {
            for( int j = 0; j < I.cols; ++j )
            {
	      _I(i,j)[0]=R;
	      _I(i,j)[1]=G;
	      _I(i,j)[2]=B;				 		 
            }
			//cout << endl;
         }
         I = _I;
         break;
        }
    }
      cvtColor(I,M_RGB,CV_HSV2RGB);
    
}

void printImageInfo(Mat& I)
{
   int channels = I.channels();
   int nRows = I.rows;
   int nCols = I.cols * channels;
   
   cout << "channels: " << channels << endl;
   cout << "nRows: " << nRows << endl;
   cout << "nCols: " << nCols << endl;
}

int testMatrixToImageConversion()
{
/*	cout << "matrix->image :" << endl;
	
	cout<<"maze input: "<<endl;
	printMaze(maze);
	
	Mat image_out(MAZE_HEIGHT,MAZE_WIDTH, CV_8UC3, Scalar(0,0,255));
	image_out = MazeMatrixToImageMatrix(maze, image_out);
	cout << "image_out = " << endl << " " << image_out << endl;
	printImageInfo(image_out);
	imwrite( "output.bmp", image_out );
	return(0);*/
}

int testImageToMatrixConversion(char* filename)
{
	cout << "image->matrix :" << endl;
	
	Mat image_in;
	image_in = imread( filename, 1 );

	if( !image_in.data )
	{
	  printf( "No image data \n" );
	  return -1;
	}

	cout << "image_in = " << endl << " " << image_in << endl;
	printImageInfo(image_in);

	char** maze_var = ImageMatrixToMazeMatrix(image_in);

	cout<<"maze output: "<<endl;
	printMaze(maze_var);

	printAsArray(maze_var);
	
	freeMaze(maze_var);

	return(0);
}

int displayImage(Mat& image)
{
  namedWindow( "Display Image", CV_WINDOW_AUTOSIZE );
  imshow( "Display Image", image );
  waitKey(0);
  return(0);
}

int printMazeFromImage(char* filename)
{
  Mat image_in;
  image_in = imread( filename, 1 );
  printMaze(ImageMatrixToMazeMatrix(image_in));
}

int printMatrixFromImage(char* filename)
{
  Mat image_in;
  image_in = imread( filename, 1 );
  cout<<image_in<<endl;
}

int printMatrixHSVFromImage(char* filename)
{
  Mat image_in;
  image_in = imread( filename, 1 );
//  cout<<image_in<<endl;
  Mat M_HSV;
  cvtColor(image_in,M_HSV,CV_RGB2HSV);
  cout<<"M_HSV = "<<M_HSV<<endl;
}

int main( int argc, char** argv )
{
//   testMatrixToImageConversion();
//  testImageToMatrixConversion(argv[1]);
//   printMazeFromImage(argv[1]);
//   printMatrixFromImage(argv[1]);
   printMatrixHSVFromImage(argv[1]);

//  Mat M_RGB=imread(argv[1],1);
//  calcMedian(M_RGB);
//  imwrite("out.bmp",M_RGB);

//   Mat M_RGB=imread(argv[1],1);
//   cout<<"M_RGB = "<<M_RGB<<endl;

//   Mat M_HSV;
//   cvtColor(M_RGB,M_HSV,CV_RGB2HSV);
//   cout<<"M_HSV = "<<M_RGB<<endl;
//   
//   calcMedian(M_HSV);
//   cout<<"M_HSV = "<<M_RGB<<endl;
// 
//   cvtColor(M_HSV,M_RGB,CV_HSV2RGB);
//   cout<<"M_RGB = "<<M_RGB<<endl;

//  Mat subsection(M, Rect(0, 1, 2, 1) );
//  cout<<"subsection = "<<subsection<<endl;

//   imwrite("out.bmp",M_RGB);

  return(0);
}
